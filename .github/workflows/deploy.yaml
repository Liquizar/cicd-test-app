name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Kubernetes YAML
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install kubeval
        run: |
          curl -sSLO https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar -xzf kubeval-linux-amd64.tar.gz
          chmod +x kubeval
          sudo mv kubeval /usr/local/bin/

      - name: Validate Kubernetes Manifests
        run: |
          kubeval --strict --ignore-missing-schemas k8s/*.yaml

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfiles/frontend.Dockerfile
          push: true
          tags: docker.io/${{ secrets.DOCKER_USERNAME }}/frontend:latest

      - name: Build & Push Backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfiles/backend.Dockerfile
          push: true
          tags: docker.io/${{ secrets.DOCKER_USERNAME }}/backend:latest

  deploy-argocd:
    name: Deploy via ArgoCD
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Login to ArgoCD
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure

      - name: Sync Frontend & Backend
        run: |
          argocd app sync frontend
          argocd app sync backend